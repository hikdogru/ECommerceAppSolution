@{
    Layout = "~/Views/Shared/_Root.cshtml";
    ViewBag.BodyCss = "header-fixed header-tablet-and-mobile-fixed";
}
@if (ViewData.ContainsKey("PopupMode") && ViewData["PopupMode"].Equals(true))
{
    <div class="app-main flex-column flex-row-fluid" id="kt_app_main">
        <div class="d-flex flex-column flex-column-fluid container-fluid">
            <div class="content flex-column-fluid" id="kt_content">
                @RenderBody()
            </div>
        </div>
    </div>
}
else
{
    <div class="d-flex flex-column flex-root app-root" id="kt_app_root">
        <div class="app-page  flex-column flex-column-fluid " id="kt_app_page">
            @await Html.PartialAsync("_Header.cshtml")

            <div class="app-wrapper  flex-column flex-row-fluid " id="kt_app_wrapper">
                @if (IsSectionDefined("SubHeader"))
                {
                    <text>
                        @RenderSection("SubHeader")
                    </text>
                }
                else
                {
                    <text>
                        @await Component.InvokeAsync("SideMenu")
                    </text>
                }

                <div class="app-main flex-column flex-row-fluid" id="kt_app_main">
                    <div class="d-flex flex-column flex-column-fluid">
                        <div id="kt_app_content" class="app-content  flex-column-fluid ">
                            <div id="kt_app_content_container" class="app-container  container-fluid ">
                                @RenderBody()
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
}

@section TopLevelCss {
    @RenderSection("TopLevelCss", false)
}
@section PageLevelCss {
    @RenderSection("PageLevelCss", false)
    @if (ViewData.ContainsKey("PopupMode") && ViewData["PopupMode"].Equals(true))
    {
        <style>
            table tr td:last-child, table tr th:last-child {
                display: none;
            }
        </style>
    }
}
@section TopLevelJS {

    @RenderSection("TopLevelJS", false)
}
@section Scripts {
    @await Component.InvokeAsync("NToastNotify")
    @RenderSection("Scripts", false)
    @if (ViewData.ContainsKey("PopupMode") && ViewData["PopupMode"].Equals(true))
    {
        <script>
            $(document).ready(function () {
                $('tr[type="datarow"]').click(function () {
                    let id = $(this).data("id");
                    let name = $(this).data("name");
                    if (typeof (window.opener.setSelection) !== "undefined") {
                        window.opener.setSelection(id, name);
                        window.close();
                    }
                });
            });
        </script>
    }

}